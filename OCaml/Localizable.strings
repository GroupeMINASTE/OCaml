/* 
  Localizable.strings
  OCaml

  Created by Nathan FALLET on 05/01/2021.
  
*/

/*
 App strings
 */
"learn" = "Learn";
"code" = "Code";
"settings" = "Settings";
"about" = "About";
"console" = "Console";
"developer" = "Developer";
"developer_text" = "Developed by Nathan Fallet";
"more" = "More by our team";
"button_ok" = "OK";
"error" = "Error while compiling code";
"error_unknown" = "Unknown error";
"button_cancel" = "Cancel";
"donate_title" = "Donate";
"donate_header" = "Select an amount to donate:";
"donate_footer" = "This donation will help our organization to develop its projects, mainly Extopy, the social network we are working on, which will require some storage for its servers.";
"donate_thanks" = "Thanks for donating to our organization!";

/*
 OCaml course content
 */
"type_chapter" = "Chapter";
"sequence_basics" = "The basics";
"chapter_discover_title" = "Discover OCaml";
"chapter_discover_welcome" = "Welcome to this first part of the OCaml course!";
"chapter_discover_comment" = "This is OCaml code";
"chapter_discover_first" = "Let's explain this first sheet of code. What is between '(*' and '*)' is a comment. It is not executed and is here to add awesome explaination about the code. Then there is a 'print_endline': it is a built-in function printing a string to the screen with a return character to go to the next line. Then what is between quotation marks (\") is the String which will be printed to the screen. Finally, the ';;' end the statement and return the last think on the stack. (here it is unit, we will details that later)";
"chapter_discover_second" = "You can try to execute this code in the 'Code' tab, and see what is does. When you are ready, you can go to the next chapter about variables to start learning OCaml basics.";
"chapter_variables_title" = "Variables";
"chapter_variables_def" = "Local and global variable definition";
"chapter_variables_intro" = "A variable is a location in memory where you can store a value. Here is how a variable is created in OCaml:";
"chapter_variables_def_global" = "The 'let' keyword indicates that we define a variable. Then follow the name of the variable, x, which is set to a value, 3. The variable is defined globally (it is accessible from everywhere) and is immutable (its value cannot be changed)";
"chapter_variables_def_local" = "A variable can also be defined locally:";
"chapter_variables_def_local_comment1" = "We define a local x variable";
"chapter_variables_def_local_comment2" = "Here we have an error";
"chapter_variables_def_local2" = "In the first expression, we define a variable, x, available in everything following the 'in' keyword, until a ';;' is reached. So 'x + 4' evaluates to '7'. However, in the second expression, x is not defined, because it was declared locally in the other expression. So we will have an error.";
"chapter_variables_types" = "Variable types";
"chapter_variables_types_intro" = "There are different types of variables in OCaml. In the previous example, x was an integer, known as the 'int' type. Here are basic types of variables available in OCaml:";
"chapter_variables_types_description" = "'int' and 'float' types represent integrers and floating point numbers.\n'bool' represents boolean values, true or false.\n'string' represents string, a succession of characters.\n'char' represents a single character.\nNote that a character is defined with single quotes, while a string is defined with double quotes. \nFinally, 'unit' is the type representing nothing.";
"chapter_variables_references" = "Declare references (mutable variables)";
"chapter_variables_references_intro" = "We can declare mutable variables, called references:";
"chapter_variables_references_def" = "Here, x is not containing the value 3, but a reference to the value 3. That way, we can change the value that x points to, which is not possible with a classic variable. References can be useful for loops where you need to increment a value for each round, for example.";
"chapter_variables_references_details" = "The statement 1 set the value of the reference to 4. Note the usage of ':=' instead of '=' to set the value to the reference instead of the value to the variable (which won't work). The statement 2 returns the reference (of type 'int ref'), while the statement 3 returns the value of the reference (here '4', of type 'int').";
